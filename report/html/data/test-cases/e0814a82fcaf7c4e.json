{
  "uid" : "e0814a82fcaf7c4e",
  "name" : "test_address_manage.TestAddressManger.test_add_address_suc[test_address_002-lucy-13377778888-area1-10086\\u53f7-222222-None-0]",
  "fullName" : "scripts.test_address_manage.TestAddressManger.test_add_address_suc[test_address_002-lucy-13377778888-area1-10086\\u53f7-222222-None-0]",
  "historyId" : "76c64d0eb7c8c89e064b7813466546e9",
  "time" : {
    "start" : 1565011972207,
    "stop" : 1565011987540,
    "duration" : 15333
  },
  "description" : "\nauthor :Rain\nDate : 2019/08/02\nDescription :\n\n\ntest_add_address_suc",
  "descriptionHtml" : "<p>author :Rain\nDate : 2019/08/02\nDescription :</p>\n<p>test_add_address_suc</p>\n",
  "status" : "broken",
  "statusMessage" : "TimeoutException: Message: \n",
  "statusTrace" : "self = <scripts.test_address_manage.TestAddressManger object at 0x047F5890>\n\n    @pytest.fixture(autouse=True)\n    def go_add_address(self):\n>       self.page_utils.get_main_page().click_my_btn()\n\nscripts\\test_address_manage.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\npage\\main_page.py:19: in click_my_btn\n    self.click_element(PageElements.main_my_btn_id)\nbase\\base_page.py:49: in click_element\n    self.get_element(loc, timeout, poll_frequency).click()\nbase\\base_page.py:29: in get_element\n    return WebDriverWait(self.driver, timeout, poll_frequency).until(lambda x: x.find_element(*loc))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"78e254c4-75a6-4984-9a3b-e48d8d5a7a06\")>\nmethod = <function BasePage.get_element.<locals>.<lambda> at 0x047A3A98>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TimeoutException: Message: \n",
    "statusTrace" : "self = <scripts.test_address_manage.TestAddressManger object at 0x047F5890>\n\n    @pytest.fixture(autouse=True)\n    def go_add_address(self):\n>       self.page_utils.get_main_page().click_my_btn()\n\nscripts\\test_address_manage.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nf:\\python\\lib\\site-packages\\allure\\common.py:62: in impl\n    return func(*a, **kw)\npage\\main_page.py:19: in click_my_btn\n    self.click_element(PageElements.main_my_btn_id)\nbase\\base_page.py:49: in click_element\n    self.get_element(loc, timeout, poll_frequency).click()\nbase\\base_page.py:29: in get_element\n    return WebDriverWait(self.driver, timeout, poll_frequency).until(lambda x: x.find_element(*loc))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"78e254c4-75a6-4984-9a3b-e48d8d5a7a06\")>\nmethod = <function BasePage.get_element.<locals>.<lambda> at 0x047A3A98>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nf:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
    "steps" : [ {
      "name" : "首页点击我的按钮",
      "time" : {
        "start" : 1565011972208,
        "stop" : 1565011987513,
        "duration" : 15305
      },
      "status" : "failed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "host",
    "value" : "DESKTOP-54IJVK6"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "thread",
    "value" : "980-MainThread"
  }, {
    "name" : "suite",
    "value" : "scripts"
  }, {
    "name" : "testClass",
    "value" : "scripts"
  }, {
    "name" : "testMethod",
    "value" : "test_address_manage.TestAddressManger.test_add_address_suc[test_address_002-lucy-13377778888-area1-10086\\u53f7-222222-None-0]"
  }, {
    "name" : "package",
    "value" : "scripts"
  }, {
    "name" : "resultFormat",
    "value" : "allure1"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "e0814a82fcaf7c4e.json",
  "parameterValues" : [ ]
}